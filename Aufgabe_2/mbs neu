import vtk

class mbsObject:
    def __init__(self, type, subtype, text, parameter):
        self.__type = type
        self.__subtype = subtype
        self.parameter = parameter
        self.vtk_actor = None

        for line in text:
            splitted = line.split(":")
            for key in parameter.keys():
                if splitted[0].strip() == key:
                    if parameter[key]["type"] == "float":
                        parameter[key]["value"] = self.str2float(splitted[1])
                    elif parameter[key]["type"] == "vector":
                        parameter[key]["value"] = self.str2vector(splitted[1])

    def str2float(self, inString):
        return float(inString)

    def float2str(self, inFloat):
        return str(inFloat)

    def str2vector(self, inString):
        return [float(x) for x in inString.split(",")]

    def vector2str(self, inVector):
        return ','.join(map(str, inVector))

    def add_vtk_representation(self):
        # Standardimplementierung, wenn keine spezifische Darstellung definiert ist
        print(f"Keine VTK-Darstellung f√ºr {self.__type} {self.__subtype} definiert.")
        return None

    def get_vtk_actor(self):
        return self.vtk_actor

    def writeInputfile(self, file):
        text = []
        text.append(f"{self.__type} {self.__subtype}\n")
        for key, param in self.parameter.items():
            if param["type"] == "float":
                text.append(f"\t{key} = {self.float2str(param['value'])}\n")
            elif param["type"] == "vector":
                text.append(f"\t{key} = {self.vector2str(param['value'])}\n")

        text.append(f"End{self.__type}\n%\n")
        
        file.writelines(text)


class rigidbody(mbsObject):
    def __init__(self, text):
        parameter = {
            "mass": {"type": "float", "value": 1.0},
            "COG": {"type": "vector", "value": [0.0, 0.0, 0.0]}
        }
        super().__init__("Body", "Rigid_EulerParamter_PAI", text, parameter)

    def add_vtk_representation(self):
        reader = vtk.vtkOBJReader()
        reader.SetFileName("path/to/your/model.obj")
        reader.Update()
        mapper = vtk.vtkPolyDataMapper()
        mapper.SetInputConnection(reader.GetOutputPort())
        self.vtk_actor = vtk.vtkActor()
        self.vtk_actor.SetMapper(mapper)
        self.vtk_actor.GetProperty().SetColor(0.5, 0.5, 1.0)

    def writeInputfile(self, file):
        super().writeInputfile(file)


class constraint(mbsObject):
    def __init__(self, text):
        parameter = {
            "constraint_type": {"type": "string", "value": "fixed"},
            "COG": {"type": "vector", "value": [0.0, 0.0, 0.0]}
        }
        super().__init__("Constraint", "Fixed", text, parameter)

    def add_vtk_representation(self):
        sphere = vtk.vtkSphereSource()
        sphere.SetRadius(0.05)
        sphere.SetCenter(self.parameter["COG"]["value"])
        mapper = vtk.vtkPolyDataMapper()
        mapper.SetInputConnection(sphere.GetOutputPort())
        self.vtk_actor = vtk.vtkActor()
        self.vtk_actor.SetMapper(mapper)
        self.vtk_actor.GetProperty().SetColor(1.0, 0.0, 0.0)

    def writeInputfile(self, file):
        super().writeInputfile(file)


class force(mbsObject):
    def __init__(self, text):
        parameter = {
            "force_type": {"type": "string", "value": "gravity"},
            "location": {"type": "vector", "value": [0.0, 0.0, 0.0]},
            "direction": {"type": "vector", "value": [0.0, -1.0, 0.0]}
        }
        super().__init__("Force", "Gravity", text, parameter)

    def add_vtk_representation(self):
        arrow_source = vtk.vtkArrowSource()
        arrow_source.SetTipResolution(10)
        arrow_source.SetShaftResolution(10)
        arrow_source.SetTipLength(0.2)
        arrow_source.SetTipRadius(0.05)
        arrow_source.SetShaftRadius(0.02)

        arrow_mapper = vtk.vtkPolyDataMapper()
        arrow_mapper.SetInputConnection(arrow_source.GetOutputPort())
        self.vtk_actor = vtk.vtkActor()
        self.vtk_actor.SetMapper(arrow_mapper)
        self.vtk_actor.GetProperty().SetColor(0.0, 1.0, 0.0)

    def writeInputfile(self, file):
        super().writeInputfile(file)